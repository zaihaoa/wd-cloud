<?xml version="1.0" encoding="UTF-8"?>
<!-- status：这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出 -->
<!-- monitorInterval：Log4j2能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 -->
<configuration monitorInterval="300">
    <!-- 日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

    <!-- 变量配置 -->
    <Properties>

        <!-- 日志存储的路径 -->
        <property name="FILE_PATH" value="${spring:logging.file.path}/${spring:logging.file.name}"/>
        <!-- 日志文件名称 -->
        <property name="FILE_NAME" value="${spring:logging.file.name}"/>
        <!-- 服务名称 -->
        <property name="APPLICATION_NAME" value="${spring:spring.application.name}"/>

        <!--
            配置参考:https://logging.apache.org/log4j/2.x/manual/layouts.html#PatternLayout
            [时间][日志等级][服务器内网IP][进程PID][线程名][服务名称][TraceID][包首字母.类名][日志信息]
            %date：日期
            %thread：线程名
            %-5level：级别从左显示5个字符宽度
            %msg：日志消息
            %n：换行符
            %logger{36}：Logger名字最长36个字符
            %style{}{White}

         -->
        <property name="LOG_PATTERN_CONSOLE"
                  value="%style{[%d{yyyy-MM-dd HH:mm:ss.SSS}]}{White} %highlight{[%-5level]} %style{[${APPLICATION_NAME}]}{White} %style{[%X{traceId}]}{White} %style{[%X{userId}]}{White} %style{[%15.15thread]}{White} %style{[%-40.40c{1.}\:%-5line]}{White} [%m]%n"/>
        <property name="LOG_PATTERN_FILE"
                  value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5p] [${APPLICATION_NAME}] [%X{traceId:-0}] [%X{userId:-0}] [%thread] [%c{1.}\:%M:%line] [%m]%n"/>
    </Properties>

    <appenders>
        <!-- 控制台输出 -->
        <console name="console"
                 target="SYSTEM_OUT">

            <!--输出日志的格式 -->
            <PatternLayout pattern="${LOG_PATTERN_CONSOLE}"/>
        </console>


        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <RollingFile name="rollingFile"
                     fileName="${FILE_PATH}/${FILE_NAME}.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-%d{yyyy-MM-dd}_%i.log">

            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN_FILE}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour -->
                <TimeBasedTriggeringPolicy interval="6"/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
            <!-- 最多保留文件数，默认为最多同一文件夹下7个文件开始覆盖 -->
            <DefaultRolloverStrategy max="100"/>
        </RollingFile>
    </appenders>


    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。 -->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效 -->
    <loggers>
        <root level="INFO">
            <appender-ref ref="console"/>
            <appender-ref ref="rollingFile"/>
        </root>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息 -->
        <logger name="org.mybatis" level="INFO" additivity="false">
            <AppenderRef ref="console"/>
        </logger>
        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。 -->
        <Logger name="org.springframework" level="INFO" additivity="false">
            <AppenderRef ref="console"/>
        </Logger>
    </loggers>
</configuration>

